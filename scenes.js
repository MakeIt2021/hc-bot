const Scene = require('telegraf/scenes/base')
const fs = require("fs")

class Users {
    constructor(id, name, age, sex, height, weight, activity) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.sex = sex;
        this.height = height;
        this.weight = weight;
        this.activity = activity;
    }
}

class tempData {
    constructor(id, water, time) {
        this.id = id
        this.water = water
        this.time = time
    }
}

function checkUser(id) {
    let data

    data = fs.readFileSync("db.txt", "utf8")
    if (data.includes(`"id":${id}`)) {
        let str = data.slice(data.indexOf(`"id":${user_id_start}`) - 1, data.indexOf('\n', data.indexOf(`"id":${user_id_start}`)))
        let currUser = JSON.parse(str)
        return currUser
    }
    return 0
}

let user = new Users()
let usersTempData = new tempData()
let user_id_start
let water_message_id



class SceneGenerator {
    GenCheckerScene() {
        const checker = new Scene('checker')
        checker.enter(async (ctx) => {
            user_id_start = ctx.message.from.id
            let data

            data = fs.readFileSync("db.txt", "utf8");
            // console.log(data)
            if (data.includes(`"id":${user_id_start}`)) {
                let str = data.slice(data.indexOf(`"id":${user_id_start}`) - 1, data.indexOf('\n', data.indexOf(`"id":${user_id_start}`)))
                const user = JSON.parse(str)

                await ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}. –†–∞–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—é!`)
                await ctx.scene.enter('mainMenu')
            } else {
                await ctx.scene.enter('hello')
            }
        })
        return checker
    }

    //======================================================\\ –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï //======================================================\\

    GenHelloScene() {
        const hello = new Scene('hello')
        hello.enter(async (ctx) => {
            await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
        })
        hello.on('text', async (ctx) => {
            let user_name = ctx.message.text

            let user_id = ctx.message.from.id
            user_id_start = ctx.message.from.id

            user.id = user_id
            user.name = user_name
            if (user_name) {
                await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${user_name}`)
                await ctx.scene.enter('sex')
            } else {
                await ctx.reply('–Ø —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç')
                await ctx.scene.reenter()
            }
        })
        hello.on('message', (ctx) => ctx.reply('–≠—Ç–æ —è–≤–Ω–æ –Ω–µ —Ç–≤–æ–µ –∏–º—è'))
        return hello
    }

    GenSexScene () {
        const sex = new Scene('sex')
        sex.enter(async (ctx) => {
            await ctx.reply('–ú–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –í–∞–º –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è –Ω–∞—á–∞–ª–∞, –∫—Ç–æ –í—ã?', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–Ø –º—É–∂—á–∏–Ω–∞', callback_data: 'male'}
                        ],
                        [
                            {text: '–Ø –∂–µ–Ω—â–∏–Ω–∞', callback_data: 'female'}
                        ]
                    ]
                }
            })
        })
        sex.action('male', async ctx => {
            ctx.deleteMessage()
            let user_sex = '–ú—É–∂—á–∏–Ω–∞'
            user.sex = user_sex

            await ctx.scene.enter('age')
        })
        sex.action('female', async ctx => {
            ctx.deleteMessage()
            let user_sex = '–ñ–µ–Ω—â–∏–Ω–∞'
            user.sex = user_sex

            await ctx.scene.enter('age')
        })
        return sex
    }

    GenAgeScene () {
        const age = new Scene('age')
        age.enter(async (ctx) => {
            await ctx.reply('–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?')
        })
        age.on('text', async (ctx) => {
            let user_age = Number(ctx.message.text)
            let user_id = ctx.message.from.id

            if (user.id === user_id)
                user.age = String(user_age)
            if (user_age && user_age > 0) {
                await ctx.scene.enter('activity')
            } else {
                await ctx.reply('–ú–µ–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è')
                await ctx.scene.reenter()
            }
        })
        age.on('message', (ctx) => ctx.reply('–î–∞–≤–∞–π –ª—É—á—à–µ –≤–æ–∑—Ä–∞—Å—Ç'))
        return age
    }

    GenActivityScene () {
        const activity = new Scene('activity')
        activity.enter(async (ctx) => {
            await ctx.reply('–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: –∫–∞–∫ —á–∞—Å—Ç–æ –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–£ –º–µ–Ω—è —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –Ω–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫', callback_data: '1.2'}
                        ],
                        [
                            {text: '–Ø —Å–æ–≤–µ—Ä—à–∞—é –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–µ–∂–∫–∏ –∏–ª–∏ –¥–µ–ª–∞—é –ª—ë–≥–∫—É—é –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É 1 ‚Äì 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', callback_data: '1.375'}
                        ],
                        [
                            {text: '–Ø –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏ 3 ‚Äì 5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data: '1.55'}
                        ],
                        [
                            {text: '–Ø –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å 6 ‚Äì 7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', callback_data: '1.725'}
                        ],
                        [
                            {text: '–ú–æ—è —Ä–∞–±–æ—Ç–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Ç—Ä—É–¥–æ–º. –Ø —Ç—Ä–µ–Ω–∏—Ä—É—é—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 2 —Ä–∞–∑–∞, –≤–∫–ª—é—á–∞—è —Å–∏–ª–æ–≤–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è', callback_data: '1.9'}
                        ]
                    ]
                }
            })
        })
        activity.action('1.2', async ctx => {
            ctx.deleteMessage()
            let user_activity = '1.2'
            user.activity = user_activity

            await ctx.scene.enter('height')
        })
        activity.action('1.375', async ctx => {
            ctx.deleteMessage()
            let user_activity = '1.375'
            user.activity = user_activity

            await ctx.scene.enter('height')
        })
        activity.action('1.55', async ctx => {
            ctx.deleteMessage()
            let user_activity = '1.55'
            user.activity = user_activity

            await ctx.scene.enter('height')
        })
        activity.action('1.725', async ctx => {
            ctx.deleteMessage()
            let user_activity = '1.725'
            user.activity = user_activity

            await ctx.scene.enter('height')
        })
        activity.action('1.9', async ctx => {
            ctx.deleteMessage()
            let user_activity = '1.9'
            user.activity = user_activity

            await ctx.scene.enter('height')
        })
        return activity
    }

    GenHeightScene () {
        const height = new Scene('height')
        height.enter(async (ctx) => {
            await ctx.reply('–°–ø–∞—Å–∏–±–æ. –ê –∫–∞–∫–æ–π —É –í–∞—Å —Ä–æ—Å—Ç?')
        })
        height.on('text', async (ctx) => {
            let user_height = Number(ctx.message.text)
            let user_id = ctx.message.from.id

            if (user.id === user_id)
                user.height = String(user_height)
            if (user_height && user_height > 0) {
                await ctx.scene.enter('weight')
            } else {
                await ctx.reply('–ú–µ–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è')
                await ctx.scene.reenter()
            }
        })
        height.on('message', (ctx) => ctx.reply('–î–∞–≤–∞–π –ª—É—á—à–µ —Ä–æ—Å—Ç'))
        return height
    }

    GenWeightScene () {
        const weight = new Scene('weight')
        weight.enter(async (ctx) => {
            await ctx.reply('–ë–ª–∞–≥–æ–¥–∞—Ä—é. –°–∫–æ–ª—å–∫–æ –í—ã –≤–µ—Å–∏—Ç–µ?')
        })
        weight.on('text', async (ctx) => {
            let user_weight = Number(ctx.message.text)

            let user_id = ctx.message.from.id
            if (user.id === user_id)
                user.weight = String(user_weight)
            if (user_weight && user_weight > 0) {
                await ctx.scene.enter('inTotal')
            } else {
                await ctx.reply('–ú–µ–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è')
                await ctx.scene.reenter()
            }
        })
        weight.on('message', (ctx) => ctx.reply('–î–∞–≤–∞–π –ª—É—á—à–µ –≤–µ—Å'))
        return weight
    }



    GenInTotalScene () {
        const inTotal = new Scene('inTotal')
        inTotal.enter(async (ctx) => {
            let user_id = ctx.message.from.id
            if (user.id === user_id && user_id === user_id_start){
                await ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã, ${user.name}! –ò—Ç–∞–∫, –í—ã ${user.sex} –∏ –í–∞–º ${user.age} –ª–µ—Ç. –í–∞—à —Ä–æ—Å—Ç ${user.height}, –∞ –≤–µ—Å–∏—Ç–µ –í—ã ${user.weight} –∫–≥. –í—Å—ë –≤–µ—Ä–Ω–æ?`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–í—Å—ë –≤–µ—Ä–Ω–æ üöÄ', callback_data: 'ok'}
                            ],
                            [
                                {text: '–ù–µ—Ç, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'needToEdit'}
                            ]
                        ]
                    }
                })

                // buttons_clarify
                inTotal.action('ok', async ctx => {
                    ctx.deleteMessage()
                    fs.appendFileSync("db.txt", JSON.stringify(user) + "\n ------- \n")
                    await ctx.reply(user)
                    console.log(user)
                    await ctx.scene.enter('mainMenu')
                })

                inTotal.action('needToEdit', async ctx => {
                    ctx.deleteMessage()
                    await ctx.scene.enter('hello')
                })
            } else {
                await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.')
                //todo –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!
            }
        })
        return inTotal
    }

    //======================================================\\ –ó–ù–ê–ö–û–ú–°–¢–í–û –ó–ê–í–ï–†–®–ï–ù–û //======================================================\\
    GenMainMenuScene () {
        const mainMenu = new Scene('mainMenu')
        mainMenu.enter(async (ctx) => {
            // await ctx.reply('–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
            await ctx.reply(`–í –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∑–∞–±—ã–≤–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @MakeItApps, –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∏—Ç–µ —ç—Ç–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤–Ω–æ–≤—å. –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–í–æ–¥–∞', callback_data: 'water'},
                            {text: '–°–æ–Ω', callback_data: 'sleep'}
                        ],
                        [
                            {text: '–ü–∏—Ç–∞–Ω–∏–µ', callback_data: 'meals'}
                        ],
                        [
                            {text: '–°–ø–æ—Ä—Ç', callback_data: 'sport'},
                            {text: '–°—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', callback_data: 'stress'}
                        ]
                    ]
                }
            })
        })

        mainMenu.action('water', async ctx => {
            ctx.deleteMessage()

            // water_message_id = (await ctx.reply('–°–µ–≥–æ–¥–Ω—è –í—ã –≤—ã–ø–∏–ª–∏ $ —Å—Ç–∞–∫–∞–Ω–æ–≤')).message_id
            await ctx.scene.enter('water')
        })
        mainMenu.action('sleep', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('sleep')
        })
        mainMenu.action('meals', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('meals')
        })
        mainMenu.action('sport', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('sport')
        })
        mainMenu.action('stress', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('stress')
        })
        return mainMenu
    }

    GenWaterScene () {
        const water = new Scene('water')
        water.enter(async (ctx) => {
            let data = fs.readFileSync("db_temp_values.txt", "utf8");
            if (data.includes(`"id":${ctx.callbackQuery.from.id}`)) {
                let str = data.slice(data.indexOf(`"id":${ctx.callbackQuery.from.id}`) - 1, data.indexOf('\n', data.indexOf(`"id":${ctx.callbackQuery.from.id}`)))
                usersTempData = JSON.parse(str)
            }

            await ctx.reply(`–°–µ–≥–æ–¥–Ω—è –í—ã –≤—ã–ø–∏–ª–∏ ${data ? usersTempData.water : "0"}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '+', callback_data: 'plus'},
                            {text: '-', callback_data: 'minus'}
                        ],
                        [
                            {text: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø–æ–ª—å–∑–µ –≤–æ–¥—ã', callback_data: 'lmWater'}
                        ],
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        water.action('plus', async ctx => {
            usersTempData.id = ctx.callbackQuery.from.id
            await ctx.deleteMessage()
            let data = fs.readFileSync("db_temp_values.txt", "utf8");
            if (data.includes(`"id":${ctx.callbackQuery.from.id}`)) {
                let str = data.slice(data.indexOf(`"id":${ctx.callbackQuery.from.id}`) - 1, data.indexOf('\n', data.indexOf(`"id":${ctx.callbackQuery.from.id}`)))
                usersTempData = JSON.parse(str)
                let formerDate = usersTempData.time.slice(0, 2)
                let formerMonth = usersTempData.time.slice(3, 5)
                let formerYear = usersTempData.time.slice(6, 10)
                console.log(formerYear)
                usersTempData.water += 1
                let now = new Date();
                if (formerDate !== now.getDate().toString() || formerMonth !== now.getMonth().toString() || formerYear !== now.getFullYear().toString()) {
                    fs.writeFileSync("db_temp_values.txt", "")
                }
                let data2 = fs.readFileSync("db_temp_values.txt", "utf8")

                usersTempData.time = now.getDate() + "-" + now.getMonth() + "-" + now.getFullYear()
                data2 = data2.replace(`{"id":${ctx.callbackQuery.from.id},"water":${usersTempData.water - 1},"time":"${formerDate}-${formerMonth}-${formerYear}"}\n ------- \n`, '')
                fs.writeFileSync("db_temp_values.txt", JSON.stringify(usersTempData) + "\n ------- \n" + data2)
                await ctx.scene.enter('water')
            } else {
                usersTempData.water = 1
                let now = new Date();
                usersTempData.time = now.getDate() + "-" + now.getMonth() + "-" + now.getFullYear()
                let value = JSON.stringify(usersTempData) + "\n ------- \n"
                fs.appendFileSync("db_temp_values.txt", value)
                await ctx.scene.enter('water')
            }
        })

        water.action('minus', async ctx => {
            usersTempData.id = ctx.callbackQuery.from.id
            ctx.deleteMessage(water_message_id)
            let data = fs.readFileSync("db_temp_values.txt", "utf8");
            if (data.includes(`"id":${ctx.callbackQuery.from.id}`)) {
                let str = data.slice(data.indexOf(`"id":${ctx.callbackQuery.from.id}`) - 1, data.indexOf('\n', data.indexOf(`"id":${ctx.callbackQuery.from.id}`)))
                usersTempData = JSON.parse(str)
                let formerDate = usersTempData.time.slice(0, 2)
                let formerMonth = usersTempData.time.slice(3, 5)
                let formerYear = usersTempData.time.slice(6, 10)

                if (usersTempData.water >= 1) {
                    usersTempData.water -= 1
                    let now = new Date();
                    if (formerDate != now.getDate().toString() || formerMonth != now.getMonth().toString() || formerYear != now.getFullYear().toString()) {
                        fs.writeFileSync("db_temp_values.txt", "")
                    }

                    let data2 = fs.readFileSync("db_temp_values.txt", "utf8")
                    usersTempData.time = now.getDate() + "-" + now.getMonth() + "-" + now.getFullYear()
                    data2 = data2.replace(`{"id":${ctx.callbackQuery.from.id},"water":${usersTempData.water + 1},"time":"${formerDate}-${formerMonth}-${formerYear}"}\n ------- \n`, '')
                    fs.writeFileSync("db_temp_values.txt", JSON.stringify(usersTempData) + "\n ------- \n" + data2)
                    await ctx.scene.enter('water')
                }
            }
        })

        water.action('back', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('mainMenu')
        })
        return water
    }



    GenSleepScene () {
        const sleep = new Scene('sleep')
        sleep.enter(async (ctx) => {
            await ctx.reply('–û—Ç—Ö–æ–¥ –∫–æ —Å–Ω—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ 23:00, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–∞ (–≥–æ—Ä–º–æ–Ω–∞ —Å–Ω–∞) –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É–∂–µ –≤ 00:00, –∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ 04:00. –ü–æ–µ—Å—Ç—å –Ω–∞–¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞. –ì–ª–∞–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ - –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ç–µ–º–Ω–æ—Ç–∞ (–≤—ã—Ç—è–Ω—É—Ç—É—é —Ä—É–∫—É –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ). –õ—é–±–æ–π —Å–≤–µ—Ç - –≤—Ä–∞–≥ –º–µ–ª–∞—Ç–æ–Ω–∏–Ω–∞. —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω —Å–ø–∞—Ç—å 7-8 —á–∞—Å–æ–≤. –ï—Å–ª–∏ —Å–ª–æ–∂–Ω–æ –æ—Ç—Ö–æ–¥–∏—Ç—å –∫–æ —Å–Ω—É. –ó–∞ 2 —á–∞—Å–∞ ', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        sleep.action('back', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('mainMenu')
        })
        return sleep
    }

    GenMealsScene () {
        // TODO: –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ –≤—Å—ë —ç—Ç–æ —Å 16 –ª–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–Ω—è—Ç—å —Å —Å–µ–±—è –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

        const meals = new Scene('meals')

        meals.enter(async (ctx) => {
            let user = checkUser(ctx.callbackQuery.from.id)
            if (user) {
                let calories, protein, fats, carbohydrates, bmi, bmi_result
                bmi = user.weight / Math.pow(user.height / 100, 2)

                if (bmi < 18.5) {
                    bmi_result = '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å'
                } else if (18.5 <= bmi <= 24.9) {
                    bmi_result = '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å'
                } else if (25 <= bmi <= 29.9) {
                    bmi_result = '—á—Ä–µ–∑–º–µ—Ä–Ω—ã–π –≤–µ—Å'
                } else if (30 <= bmi <= 34.9) {
                    bmi_result = '–æ–∂–∏—Ä–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç–µ–ø–µ–Ω–∏'
                } else if (35 <= bmi <= 39.9) {
                    bmi_result = '–æ–∂–∏—Ä–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–µ–ø–µ–Ω–∏'
                } else if (bmi >= 40) {
                    bmi_result = '–æ–∂–∏—Ä–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–µ–ø–µ–Ω–∏'
                }

                if (user.sex === '–ñ–µ–Ω—â–∏–Ω–∞') {
                    calories = ((10 * parseInt(user.weight)) + (6.25 * parseInt(user.height)) - (5 * parseInt(user.age)) - 161) * parseFloat(user.activity)
                } else {
                    calories = (10 * parseInt(user.weight) + 6.25 * parseInt(user.height) - 5 * parseInt(user.age) + 5) * parseFloat(user.activity)
                }

                if (user.activity === "1.2") {
                    protein = parseInt(user.weight)
                    fats = parseInt(user.weight) * 0.9
                    carbohydrates = parseInt(user.weight) * 4
                } else if (user.activity === "1.375" || user.activity === "1.55") {
                    protein = parseInt(user.weight) * 1.2
                    fats = parseInt(user.weight) * 1.2
                    console.error(user.weight)
                    carbohydrates = parseInt(user.weight) * 6
                } else {
                    protein = parseInt(user.weight) * 2
                    fats = parseInt(user.weight) * 1.5
                    carbohydrates = parseInt(user.weight) * 8.5
                }

                console.error(user.weight)
                await ctx.reply(`–í–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ - ${bmi}, ${bmi_result} –ö–∞–ª–æ—Ä–∏–∏ –¥–ª—è –í–∞—Å: ${calories}, –±–µ–ª–∫–∏: ${protein}, –∂–∏—Ä—ã: ${fats}, —É–≥–ª–µ–≤–æ–¥—ã: ${carbohydrates}`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                            ]
                        ]
                    }
                })
            }
        })
        meals.action('back', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('mainMenu')
        })
        return meals
    }

    GenSportScene () {
        const sport = new Scene('sport')
        sport.enter(async (ctx) => {
            await ctx.reply('–°–ø–æ—Ä—Ç –Ω—É–∂–µ–Ω –∫–∞–∂–¥–æ–º—É. –û–¥–Ω–∞–∫–æ, –∫–∞–∂–¥–æ–º—É —Å–≤–æ–π. –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç ', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        sport.action('back', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('mainMenu')
        })
        return sport
    }

    GenStressScene () {
        const stress = new Scene('stress')
        stress.enter(async (ctx) => {
            await ctx.reply('–°—Ç—Ä–µ—Å—Å', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ü—Ä–æ—Å—Ç–æ–µ –¥—ã—Ö–∞–Ω–∏–µ', callback_data: 'exercise'},
                            {text: '–£—Å–ª–æ–∂–Ω—ë–Ω–Ω–æ–µ', callback_data: 'exercise2'},
                        ],
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        stress.action('exercise', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('exercise')
        })

        stress.action('exercise2', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('exercise2')
        })

        stress.action('back', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('mainMenu')
        })
        return stress
    }

    //todo –≤–∑—è—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Breath

    GenExerciseScene() {
        const exercise = new Scene('exercise')
        exercise.enter(async (ctx) => {
            function inhale() {
                ctx.reply('–î–µ–ª–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö, –≤–º–µ—Å—Ç–µ —Å—á–∏—Ç–∞—è –¥–æ —á–µ—Ç—ã—Ä—ë—Ö.')
            }
            function s1() {
                ctx.reply('1...')
            }
            function s2() {
                ctx.reply('2...')
            }
            function s3() {
                ctx.reply('3...')
            }
            function s4() {
                ctx.reply('4...')
            }
            function s5() {
                ctx.reply('5...')
            }
            function s6() {
                ctx.reply('6...')
            }
            function s7() {
                ctx.reply('7...')
            }
            function s8() {
                ctx.reply('8')
            }
            function exhale() {
                ctx.reply('–¢–µ–ø–µ—Ä—å –º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–¥–æ—Ö. –°—á–∏—Ç–∞–µ–º –¥–æ 6')
            }
            function stop() {
                ctx.scene.enter('completed')
            }
            await ctx.reply('–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –¥—ã—Ö–∞–Ω–∏–µ.')
            setTimeout(inhale, 3000)
            setTimeout(s1, 5000)
            setTimeout(s2, 6000)
            setTimeout(s3, 7000)
            setTimeout(s4, 8000)
            setTimeout(exhale, 10000)
            setTimeout(s1, 11000)
            setTimeout(s2, 12000)
            setTimeout(s3, 13000)
            setTimeout(s4, 14000)
            setTimeout(s5, 15000)
            setTimeout(s6, 16000)
            setTimeout(stop, 18000)
        })
        return exercise
    }

    GenExercise2Scene() {
        const exercise2 = new Scene('exercise2')
        exercise2.enter(async (ctx) => {
            function inhale() {
                ctx.reply('–î–µ–ª–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö, –≤–º–µ—Å—Ç–µ —Å—á–∏—Ç–∞—è –¥–æ —á–µ—Ç—ã—Ä—ë—Ö.')
            }
            function s1() {
                ctx.reply('1...')
            }
            function s2() {
                ctx.reply('2...')
            }
            function s3() {
                ctx.reply('3...')
            }
            function s4() {
                ctx.reply('4...')
            }
            function s5() {
                ctx.reply('5...')
            }
            function s6() {
                ctx.reply('6...')
            }
            function s7() {
                ctx.reply('7...')
            }
            function s8() {
                ctx.reply('8')
            }
            function hold() {
                ctx.reply('–ó–∞–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥—ã—Ö–∞–Ω–∏–µ, –≤–º–µ—Å—Ç–µ —Å—á–∏—Ç–∞—è –¥–æ 7')
            }
            function exhale() {
                ctx.reply('–¢–µ–ø–µ—Ä—å –º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–¥–æ—Ö. –°—á–∏—Ç–∞–µ–º –¥–æ 8')
            }
            function stop() {
                ctx.scene.enter('completed')
            }
            await ctx.reply('–°—è–¥—å—Ç–µ —Ä–æ–≤–Ω–æ, —Ä—É–∫–∏ –ø–æ–ª–æ–∂–∏—Ç–µ –Ω–∞ –∫–æ–ª–µ–Ω–∏. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –∫–æ–Ω—á–∏–∫ —Å–≤–æ–µ–≥–æ —è–∑—ã–∫–∞ –∫ –±—É–≥–æ—Ä–∫—É –Ω—ë–±–∞ –≤–æ–∑–ª–µ –≤–µ—Ä—Ö–Ω–∏—Ö –∑—É–±–æ–≤.')
            setTimeout(inhale, 3000)
            setTimeout(s1, 5000)
            setTimeout(s2, 7000)
            setTimeout(s3, 9000)
            setTimeout(s4, 11000)
            setTimeout(hold, 12500)
            setTimeout(s1, 14000)
            setTimeout(s2, 15500)
            setTimeout(s3, 17000)
            setTimeout(s4, 18500)
            setTimeout(s5, 20000)
            setTimeout(s6, 21500)
            setTimeout(s7, 23000)
            setTimeout(exhale, 24000)
            setTimeout(s1, 25000)
            setTimeout(s2, 26500)
            setTimeout(s3, 28000)
            setTimeout(s4, 29500)
            setTimeout(s5, 31000)
            setTimeout(s6, 32500)
            setTimeout(s7, 34000)
            setTimeout(s8, 35500)
            setTimeout(stop, 37000)
        })
        return exercise2
    }

    GenCompletedScene() {
        const completed = new Scene('completed')
        completed.enter(async (ctx) => {
            await ctx.reply('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data: 'exercise'},
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })
        completed.action('exercise', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('exercise')
        })

        completed.action('back', async ctx => {
            ctx.deleteMessage()
            await ctx.scene.enter('mainMenu')
        })
        return completed
    }
}

module.exports = SceneGenerator