const Scene = require('telegraf/scenes/base')
const fs = require("fs")
// let user_name, user_sex, user_age, user_height, user_weight, waterToday

let chats = {}

class Users {
    constructor(id, name, age, sex, height, weight) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.sex = sex;
        this.height = height;
        this.weight = weight;
    }
}

let user = new Users()
let user_id_start

class SceneGenerator {
    GenCheckerScene() {
        const checker = new Scene('checker')
        checker.enter(async (ctx) => {
            user_id_start = ctx.message.from.id
            let data

            data = fs.readFileSync("db.txt", "utf8");
            // console.log(data)
            if (data.includes(`"id":${user_id_start}`)) {
                let str = data.slice(data.indexOf(`"id":${user_id_start}`) - 1, data.indexOf('\n', data.indexOf(`"id":${user_id_start}`)))
                const user = JSON.parse(str)

                await ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}. –†–∞–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—é!`)
                await ctx.scene.enter('mainMenu')
            } else {
                await ctx.scene.enter('hello')
            }
        })
        return checker
    }
    //======================================================\\ –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ï –ü–†–ò–í–ï–¢–°–¢–í–ò–ï //======================================================\\
    GenHelloScene() {

        const hello = new Scene('hello')
        hello.enter(async (ctx) => {
            await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
        })
        hello.on('text', async (ctx) => {
            let user_name = ctx.message.text
            let user_id = ctx.message.from.id
            user_id_start = ctx.message.from.id

            user.id = user_id
            user.name = user_name
            if (user_name) {
                await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${user_name}`)
                await ctx.scene.enter('sex')
            } else {
                await ctx.reply('–Ø —Ç–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç')
                await ctx.scene.reenter()
            }
        })
        hello.on('message', (ctx) => ctx.reply('–≠—Ç–æ —è–≤–Ω–æ –Ω–µ —Ç–≤–æ–µ –∏–º—è'))
        return hello
    }

    GenSexScene () {
        const sex = new Scene('sex')
        sex.enter(async (ctx) => {
            await ctx.reply('–ú–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –í–∞–º –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è –Ω–∞—á–∞–ª–∞, –∫—Ç–æ –í—ã?', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–Ø –º—É–∂—á–∏–Ω–∞', callback_data: 'male'}
                        ],
                        [
                            {text: '–Ø –∂–µ–Ω—â–∏–Ω–∞', callback_data: 'female'}
                        ]
                    ]
                }
            })
        })
        sex.action('male', async ctx => {
            ctx.deleteMessage()
            let user_sex = '–ú—É–∂—á–∏–Ω–∞'
            // chats[ctx.callback_query.from.id + 'sex'] = user_sex
            ctx.scene.enter('age')
        })
        sex.action('female', async ctx => {
            ctx.deleteMessage()
            let user_sex = '–ñ–µ–Ω—â–∏–Ω–∞'
            // chats[ctx.callback_query.from.id + 'sex'] = user_sex
            ctx.scene.enter('age')
        })
        return sex
    }

    GenAgeScene () {
        const age = new Scene('age')
        age.enter(async (ctx) => {
            await ctx.reply('–•–æ—Ä–æ—à–æ. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?')
        })
        age.on('text', async (ctx) => {
            let user_age = Number(ctx.message.text)
            let user_id = ctx.message.from.id

            if (user.id == user_id)
                user.age = user_age
            if (user_age && user_age > 0) {
                ctx.scene.enter('height')
            } else {
                await ctx.reply('–ú–µ–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è')
                ctx.scene.reenter()
            }
        })
        age.on('message', (ctx) => ctx.reply('–î–∞–≤–∞–π –ª—É—á—à–µ –≤–æ–∑—Ä–∞—Å—Ç'))
        return age
    }

    GenHeightScene () {
        const height = new Scene('height')
        height.enter(async (ctx) => {
            await ctx.reply('–°–ø–∞—Å–∏–±–æ. –ê –∫–∞–∫–æ–π —É –í–∞—Å —Ä–æ—Å—Ç?')
        })
        height.on('text', async (ctx) => {
            let user_height = Number(ctx.message.text)
            let user_id = ctx.message.from.id

            if (user.id == user_id)
                user.height = user_height
            // else {
            //     await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞')
            //     ctx.scene.leave()
            // }
            // chats.id = ctx.message.from.id
            // chats.height = user_height
            if (user_height && user_height > 0) {
                ctx.scene.enter('weight')
            } else {
                await ctx.reply('–ú–µ–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è')
                ctx.scene.reenter()
            }
        })
        height.on('message', (ctx) => ctx.reply('–î–∞–≤–∞–π –ª—É—á—à–µ —Ä–æ—Å—Ç'))
        return height
    }

    GenWeightScene () {
        const weight = new Scene('weight')
        weight.enter(async (ctx) => {
            await ctx.reply('–ë–ª–∞–≥–æ–¥–∞—Ä—é. –°–∫–æ–ª—å–∫–æ –í—ã –≤–µ—Å–∏—Ç–µ?')
        })
        weight.on('text', async (ctx) => {
            let user_weight = Number(ctx.message.text)

            let user_id = ctx.message.from.id
            if (user.id == user_id)
                user.weight = user_weight
            // else {
            //     await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞')
            //     ctx.scene.leave()
            // }
            // chats.id = ctx.message.from.id
            // chats.weight = user_weight
            if (user_weight && user_weight > 0) {
                ctx.scene.enter('inTotal')
            } else {
                await ctx.reply('–ú–µ–Ω—è –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è')
                ctx.scene.reenter()
            }
        })
        weight.on('message', (ctx) => ctx.reply('–î–∞–≤–∞–π –ª—É—á—à–µ –≤–µ—Å'))
        return weight
    }

    GenInTotalScene () {
        const inTotal = new Scene('inTotal')
        inTotal.enter(async (ctx) => {
            let user_id = ctx.message.from.id
            if (user.id == user_id && user_id == user_id_start){
                await ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã, ${user.name}! –ò—Ç–∞–∫, –í—ã sex –∏ –í–∞–º ${user.age} –ª–µ—Ç. –í–∞—à —Ä–æ—Å—Ç ${user.height}, –∞ –≤–µ—Å–∏—Ç–µ –í—ã ${user.weight} –∫–≥. –í—Å—ë –≤–µ—Ä–Ω–æ?`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {text: '–í—Å—ë –≤–µ—Ä–Ω–æ üöÄ', callback_data: 'ok'}
                            ],
                            [
                                {text: '–ù–µ—Ç, –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'needToEdit'}
                            ]
                        ]
                    }
                })

                // buttons_clarify
                inTotal.action('ok', async ctx => {
                    if (user.id == user_id && user_id == user_id_start) {
                        ctx.deleteMessage()
                        fs.appendFileSync("db.txt", JSON.stringify(user) + "\n ------- \n")
                        // fs.writeFileSync("db.txt", "-----------")
                        await ctx.reply(user)
                        console.log(user)
                        ctx.scene.enter('mainMenu')
                    }
                    else {
                        await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.')
                    }
                })

                inTotal.action('needToEdit', async ctx => {
                    ctx.deleteMessage()
                    ctx.scene.enter('hello')
                })
            } else {
                await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–≤–µ–¥–æ–º–∏–º –í–∞—Å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.')
                //todo –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!
            }
        })
        return inTotal
    }

    //======================================================\\ –ó–ù–ê–ö–û–ú–°–¢–í–û –ó–ê–í–ï–†–®–ï–ù–û //======================================================\\
    GenMainMenuScene () {
        const mainMenu = new Scene('mainMenu')
        mainMenu.enter(async (ctx) => {
            // await ctx.reply('–≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
            await ctx.reply(`–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é. –ù–∏–∂–µ —Ç–µ–∫—Å—Ç, –æ–Ω –±—É–¥–µ—Ç —Å–∫–æ—Ä–æ`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–í–æ–¥–∞', callback_data: 'water'},
                            {text: '–°–æ–Ω', callback_data: 'sleep'}
                        ],
                        [
                            {text: '–ü–∏—Ç–∞–Ω–∏–µ', callback_data: 'meals'}
                        ],
                        [
                            {text: '–°–ø–æ—Ä—Ç', callback_data: 'sport'},
                            {text: '–°—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', callback_data: 'stress'}
                        ]
                    ]
                }
            })
        })

        mainMenu.action('water', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('water')
        })
        mainMenu.action('sleep', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('sleep')
        })
        mainMenu.action('meals', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('meals')
        })
        mainMenu.action('sport', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('sport')
        })
        mainMenu.action('stress', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('stress')
        })
        return mainMenu
    }

    GenWaterScene () {
        const water = new Scene('water')
        water.enter(async (ctx) => {
            await ctx.reply(`–°–µ–≥–æ–¥–Ω—è –í—ã –≤—ã–ø–∏–ª–∏ $ —Å—Ç–∞–∫–∞–Ω–æ–≤`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '+', callback_data: 'plus'},
                            {text: '-', callback_data: 'minus'}
                        ],
                        [
                            {text: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø–æ–ª—å–∑–µ –≤–æ–¥—ã', callback_data: 'lmWater'}
                        ],
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        water.action('plus', async ctx => {
            //todo waterToday += 1
            // ctx.editMessageText(chatId, messageId, `–°–µ–≥–æ–¥–Ω—è –í—ã –≤—ã–ø–∏–ª–∏ ${waterToday} —Å—Ç–∞–∫–∞–Ω–æ–≤`)
        })

        water.action('back', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('mainMenu')
        })
        return water
    }

    GenSleepScene () {
        const sleep = new Scene('sleep')
        sleep.enter(async (ctx) => {
            await ctx.reply('–°–æ–Ω', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        sleep.action('back', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('mainMenu')
        })
        return sleep
    }

    GenMealsScene () {
        const meals = new Scene('meals')
        meals.enter(async (ctx) => {
            await ctx.reply('–ü–∏—Ç–∞–Ω–∏–µ', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        meals.action('back', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('mainMenu')
        })
        return meals
    }

    GenSportScene () {
        const sport = new Scene('sport')
        sport.enter(async (ctx) => {
            await ctx.reply('–°–ø–æ—Ä—Ç', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        sport.action('back', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('mainMenu')
        })
        return sport
    }

    GenStressScene () {
        const stress = new Scene('stress')
        stress.enter(async (ctx) => {
            await ctx.reply('–°—Ç—Ä–µ—Å—Å', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back'}
                        ]
                    ]
                }
            })
        })

        stress.action('back', async ctx => {
            ctx.deleteMessage()
            ctx.scene.enter('mainMenu')
        })
        return stress
    }
}

module.exports = SceneGenerator
